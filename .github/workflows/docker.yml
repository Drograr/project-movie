# This is a basic workflow to help you get started with Actions
# helped with login : https://stackoverflow.com/questions/58226756/how-to-login-to-docker-registries-using-github-actions

name: Docker Series Builds

on: [push]


jobs:
  build:     
    runs-on: ubuntu-latest
    steps:
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      - uses: actions/checkout@v2
      
      
        #with:
        #  fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      #- name: Set up JDK 11
      #  uses: actions/setup-java@v1
      #  with:
      #    java-version: 11
      #- name: Cache SonarCloud packages
      #  uses: actions/cache@v1
      #  with:
      #   path: ~/.sonar/cache
      #    key: ${{ runner.os }}-sonar
      #    restore-keys: ${{ runner.os }}-sonar
      #- name: Cache Maven packages
      #  uses: actions/cache@v1
      #  with:
      #    path: ~/.m2
      #    key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #    restore-keys: ${{ runner.os }}-m2
      #- name: Build and analyze
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #  run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        
      - name: test mvn docker-compose
        run: |
          pwd
          mvn install -Ppackage-docker-image
      - name: Login to DockerHub Registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.pkg.github.com -u "${{ secrets.DOCKER_USER }}" --password-stdin
      #- name: Login to Docker.io
      #  run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.io -u "${{ secrets.DOCKER_USER }}" --password-stdin
      #- name: Login to GitHub Container Registry
      #  uses: docker/login-action@v1
      #  with:
      #    registry: ghcr.io
      #    #username: ${{ github.repository_owner }}
      #    #password: ${{ secrets.GITHUB_TOKEN }}
      #    username: ${{ secrets.DOCKER_USER }}
      #    password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        
     #- docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: echo ok
        run: echo "ok"
      - name: docker build images
        run: |
          # build les images a partir du dockerfile
          docker image build -t servicefilmbuild -f ./services/test_film/Dockerfile .
          docker image build -t ui-mmm -f ./web-ui/Dockerfile .
      - name: docker tag images
        run: |
         # change les noms des images et les envoies au docker hub
         docker tag servicefilmbuild docker.io/edin0/servicefilmbuild
         docker tag ui-mmm docker.io/edin0/ui-mmm
         docker tag group-service docker.io/Group-service/target/docker/edin0/group-service

      - name: docker push tagged images
        run: |
         echo ${{ secrets.TEST_PASSWORD }} | docker login -u ${{ secrets.TEST_USER }} --password-stdin
         echo ${{ secrets.TEST_PASSWORD }} | docker login docker.io -u ${{ secrets.TEST_USER }} --password-stdin
         #docker login docker.pkg.github.com
         #docker login docker.io

         # push images tagged
         docker push docker.io/edin0/servicefilmbuild
         docker push docker.io/edin0/ui-mmm
         docker push docker.io/edin0/group-service

      - name: docker test the build
        run: |
         # test the build
         docker run -p 8080:8080 -d edin0/servicefilmbuild
      #- name: docker test
      #  run: |
      #   #check website
      #   curl localhost:8080
      #- name: Test
      #  run: cd .. && ./mvnw clean test


